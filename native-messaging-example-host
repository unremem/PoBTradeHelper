#!/usr/bin/env python
# Copyright (c) 2012 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.
# A simple native messaging host. Shows a Tkinter dialog with incoming messages
# that also allows to send message back to the webapp.
import struct
import sys
import threading
import queue
import base64
import json

from pob_wrapper.pob_wrapper import PathOfBuilding

pob = None

# On Windows, the default I/O mode is O_TEXT. Set this to O_BINARY
# to avoid unwanted modifications of the input/output streams.
if sys.platform == "win32":
  import os, msvcrt
  msvcrt.setmode(sys.stdin.fileno(), os.O_BINARY)
  msvcrt.setmode(sys.stdout.fileno(), os.O_BINARY)

TEST_ITEM_1 = r'''
Item Class: Two Hand Axes
Rarity: Unique
Debeon's Dirge
Despot Axe
--------
Two Handed Axe
Physical Damage: 90-122
Elemental Damage: 347-497 (augmented)
Critical Strike Chance: 5.00%
Attacks per Second: 1.40
Weapon Range: 13
--------
Requirements:
Level: 66
Str: 140
Dex: 86
--------
Sockets: G-R R-R 
--------
Item Level: 79
--------
Adds 347 to 497 Cold Damage
15% increased Movement Speed if you've used a Warcry Recently
150% increased Elemental Damage if you've used a Warcry Recently
Warcries Knock Back and Interrupt Enemies in a smaller Area
--------
A sharp and heavy beat,
discorded, out of tune,
when you hear it on the wind,
you know death will follow soon.
--------
Note: ~price 1 chrome

'''
def run():
    pob_install = r'C:\Users\unrem\Downloads\PathOfBuildingCommunity-Portable-2.11.0'
    pob_path = r'C:\Users\unrem\Downloads\PathOfBuildingCommunity-Portable-2.11.0'  # or %ProgramData%\Path of Building` for installed version

    pob = PathOfBuilding(pob_path, pob_install)

    builds_path = pob.get_builds_dir()
    # print("POB Builds:", builds_path)

    # print('\nLoading build:')
    pob.load_build(rf'{builds_path}\UnrememFB.xml')
    # pprint(pob.get_build_info())

    # print('\nUpdating build:')
    pob.update_build()

    mod = "10% increased Intelligence"
    # print('\nTesting single mod effects:', mod)
    # pprint(pob.test_mod_effect(mod))

    # print('\nGenerating HTML from item effects test: ./test-item1.html')
    # Path('test-item1.html').write_text(pob.test_item_as_html(TEST_ITEM_1))
    # send_message('"Print"')
    
    send_message('{"echo": "%s"}' % base64.b64encode(pob.test_item_as_html(TEST_ITEM_1).encode('utf-8')))
    # send_message(pob.test_item_as_html(TEST_ITEM_1))

    # print('\nFetch data directly from Lua:')
    # print('  build.spec.curAscendClassName = ', end='')
    # pprint(pob.fetch('build.spec.curAscendClassName'))

    # `pob` is killed automatically

    return pob

# Helper function that sends a message to the webapp.
def send_message(message):
   # Write message size.
  sys.stdout.buffer.write(struct.pack('I', len(message)))
  # Write the message itself.
  sys.stdout.write(message)
  sys.stdout.flush()

# Thread that reads messages from the webapp.
def read_thread_func():
  message_number = 0
  while 1:
    # Read the message length (first 4 bytes).
    text_length_bytes = sys.stdin.buffer.read(4)
    if len(text_length_bytes) == 0:
      sys.exit(0)
    text_length = struct.unpack('@I', text_length_bytes)[0]

    # Read the text (JSON object) of the message.
    text = sys.stdin.buffer.read(text_length).decode('utf-8')
    json_object = json.loads(text)
    match json_object['text']:
      case 'LOAD_POB':
        send_message('"Loading POB"')
        pob_install = r'C:\Users\unrem\Downloads\PathOfBuildingCommunity-Portable-2.11.0'
        pob_path = r'C:\Users\unrem\Downloads\PathOfBuildingCommunity-Portable-2.11.0'  # or %ProgramData%\Path of Building` for installed version
        pob = PathOfBuilding(pob_path, pob_install)
        send_message('"Loading build"')
        # builds_path = pob.get_builds_dir()
        # pob.load_build(rf'{builds_path}\UnrememFB.xml')
        # pob.update_build()
        # send_message('{"html": "%s"}' % base64.b64encode(pob.test_item_as_html(TEST_ITEM_1).encode('utf-8')).decode('utf-8'))
      case 'LOAD_BUILD':
        send_message('"Loading build"')
        builds_path = pob.get_builds_dir()
        pob.load_build(rf'{builds_path}\UnrememFB.xml')
        pob.update_build()
      case 'ITEM_IMPACT':
        # send_message('{"html": "%s"}' % base64.b64encode(pob.test_item_as_html(json_object['item']).encode('utf-8')).decode('utf-8'))
        item_text = base64.b64decode(json.dumps(json_object['item']).encode('utf-8')).decode('utf-8').replace('\r', '')
        impact_text = base64.b64encode(pob.test_item_as_html(item_text).encode('utf-8')).decode('utf-8')
        # item_text = json.dumps(json_object['item'])
        # send_message('{"echo": %s}' % item_text)
        data_id = json.dumps(json_object['dataId'])
        send_message('{"type": "ITEM_IMPACT", "impact": "%s", "dataId": %s}' % (impact_text, data_id))
      case _:
        send_message('{"echo": %s}' % text)

    # run()
    # if queue:
    #   queue.put(text)
    # else:
    #   # In headless mode just send an echo message back.
    #   send_message('{"echo": %s}' % text)

def Main():
  send_message('"Host started"')
  read_thread_func()
  sys.exit(0)

if __name__ == '__main__':
  Main()